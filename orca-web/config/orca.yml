server:
  port: 8083

default:
  bake:
    account: default
  securityGroups: []
  vpc:
    securityGroups: []

front50:
  enabled: true
  baseUrl: ${services.front50.baseUrl:http://front50:8080}
  #baseUrl: ${services.front50.baseUrl:http://127.0.0.1:8080}
tide:
  baseUrl: http://localhost:8090
oort:
  baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}
mort:
  baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}
kato:
  baseUrl: ${services.clouddriver.baseUrl:http://localhost:7002}
echo:
  enabled: false
  baseUrl: ${services.echo.baseUrl:http://localhost:8089}
igor:
  enabled: false
  baseUrl: ${services.igor.baseUrl:http://localhost:8088}
bakery:
  enabled: false
  baseUrl: ${services.rosco.baseUrl:http://localhost:8087}
kayenta:
  enabled: false
  baseUrl: ${services.kayenta.baseUrl:http://localhost:8090}

services:
  fiat:
    enabled: false
    baseUrl: http://localhost:7003

executionRepository:
  dual:
    enabled: false
    primaryName: sqlExecutionRepository
    previousName: redisExecutionRepository
  sql:
    enabled: true
  redis:
    enabled: false

sql:
  enabled: true
  cache:
    enabled: false
  connectionPools:
    default:
      # additional connection pool parameters are available here,
      # for more detail and to view defaults, see:
      # https://github.com/spinnaker/kork/blob/master/kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/ConnectionPoolProperties.kt
      default: true
      jdbcUrl: jdbc:mysql://mysql2:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8
      #jdbcUrl: jdbc:mysql://127.0.0.1:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8
      user: orca
      password: orca
      # password: depending on db auth and how spinnaker secrets are managed
  migration:
    user: orca
    password: orca
    jdbcUrl: jdbc:mysql://mysql2:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8
    #jdbcUrl: jdbc:mysql://127.0.0.1:3306/orca?useSSL=false&useUnicode=true&characterEncoding=utf8

redis:
  connection: ${services.redis.baseUrl:redis://redis:6379}
  #connection: ${services.redis.baseUrl:redis://127.0.0.1:6379}

keiko:
  queue:
    fillExecutorEachCycle: true
    redis:
      queueName: orca.task.queue
      deadLetterQueueName: orca.task.deadLetterQueue

tasks:
  executionWindow:
    timezone: ${global.spinnaker.timezone:America/Los_Angeles}

logging:
  config: classpath:logback-defaults.xml
  level:
    org:
      apache:
        http: DEBUG
      springframework:
        web:
          client:
            RestTemplate: DEBUG

resilience4j.retry:
  instances:
    # TODO(rz): These defaults were just copied from the resilience4j website. They still need to be tuned.
    default:
      maxRetryAttempts: 2
      waitDuration: 10s
      enableExponentialBackoff: false
    # katoRetrofitServiceWriter is any write operation to Clouddriver using Retrofit.
    katoRetrofitServiceWriter:
      retryExceptions:
        - retrofit.RetrofitError

swagger:
  enabled: true
  title: Orca API
  description:
  contact:
  patterns:
    - .*tasks.*
    - .*auth.*
    - .*applications.*
    - .*securityGroups.*
    - /search
    - .*pipeline.*
    - .*pipelineConfigs.*
    - .*pipelines.*
    - .*loadBalancers.*
    - .*instances.*
    - .*images.*
    - .*elasticIps.*
    - .*credentials.*
    - .*events.*
    - .*builds.*
    - .*instanceTypes.*
    - .*vpcs.*
    - .*subnets.*
    - .*networks.*
    - .*bakery.*
    - .*executions.*
    - .*webhooks.*
    - .*firewalls.*
    - .*version.*
    - .*pubsub.*
    - .*projects.*
    - .*functions.*
    - .*managed.*
    - .*plugins.*
    - .*elasticIps.*
    - .*cache.*
    - .*instance.*
    - .*search.*
    - .*security.*
    - .*vpcs.*
    - .*credentials.*
    - .*networks.*
    - .*subnets.*
    - .*ops.*
    - .*task.*
    - .*applications.*
    - .*aws.*
    - .*azure.*
    - .*appengine.*
    - .*gce.*
    - .*kubernetes.*
    - .*instances.*
    - .*reports.*
    - .*docker.*
    - .*job.*
    - .*process.*
    - .*dcos.*
    - /default/.*
    - /credentials.*
    - /global/.*
    - /notifications.*
    - /pipelines.*
    - /strategies.*
    - /v2/.*

# This configuration lets you configure Webhook stages that will appear as native stages in the Deck UI.
# Properties that are set here will not be displayed in the GUI
#webhook:
#  preconfigured:
#    - label: Some Webhook
#      description: This is a webhook stage, but it appears as a native stage in Spinnaker
#      type: customWebhook # Should be unique
#      # The following properties are all optional:
#      enabled: true # default true
#      url: https://my.webhook.com/event
#      customHeaders:
#        Accept:
#          - application/json
#        AnotherHeader:
#          - valueOne
#          - valueTwo
#      method: POST
#      payload: |
#        {
#          "text": "Version ${trigger.buildInfo.artifacts[0].version} deployed"
#        }
#      failFastStatusCodes:
#        - 404
#        - 501
#      signalCancellation: true
#      cancelEndpoint: https://my.webhook.com/cancel
#      cancelMethod: POST
#      cancelPayload: "{}"
#      waitForCompletion: true
#      # The rest of the properties are only used if waitForCompletion == true
#      statusUrlResolution: webhookResponse # getMethod, locationHeader, webhookResponse
#      statusUrlJsonPath: $.statusUrl # Only used if statusUrlResolution == webhookResponse
#      statusJsonPath: $.status
#      progressJsonPath: $.progress
#      successStatuses: SUCCESS,COMPLETED
#      canceledStatuses: CANCELED
#      terminalStatuses: TERMINATED
#    - label: Another Webhook
#      description: This is also a webhook stage, but it has no properties set
#      type: anotherCustomWebhook
#      enabled: false

# This configuration lets you configure runJob stages that will appear as native stages in the Deck UI.
# Properties that are set here will not be displayed in the GUI
# job:
#  preconfigured:
#    - label: Some runJob
#      description: This is a runJob stage, but it appears as a native stage in Spinnaker
#      type: customRunJob # Should be unique
#      cloudProvider: titus
#      cluster:
#        imageId: alpine:latest
#      credentials: test
#      region: us-east-1
#      enabled: true # default true
#      waitForCompletion: true
#      parameters:
#      - name: source
#        mapping: cluster.env.source
#        defaultValue: mysource
#        order: 0
#      - name: destination
#        mapping: cluster.env.destination
#        defaultValue: final
#        order: 1
